(in-package #:zed.math.geometry.obb)

(declaim (inline obb))
(defstruct (obb
            (:constructor obb)
            (:conc-name nil)
            (:predicate nil)
            (:copier nil))
  (origin (p3:point) :type p3:point)
  (size (v3:uniform 0.5) :type v3:vec)
  (rotation (m3:id) :type m3:mat))

(u:define-printer (obb stream :type nil)
  (format stream "OBB"))

(u:fn-> vertices (obb) (simple-vector 8))
(declaim (inline vertices))
(defun vertices (obb)
  (declare (optimize speed))
  (let* ((origin (origin obb))
         (size (size obb))
         (rotation (rotation obb))
         (x (v3:scale (m3:get-column rotation 0) (v3:x size)))
         (y (v3:scale (m3:get-column rotation 1) (v3:y size)))
         (z (v3:scale (m3:get-column rotation 2) (v3:z size)))
         (v1 (v3:+ origin x))
         (v2 (v3:- origin x))
         (v3 (v3:copy v1))
         (v4 (v3:copy v1))
         (v5 (v3:copy v1))
         (v6 (v3:copy v2))
         (v7 (v3:copy v2))
         (v8 (v3:copy v2)))
    (declare (dynamic-extent x y z))
    (v3:+! v1 v1 y)
    (v3:+! v1 v1 z)
    (v3:+! v2 v2 y)
    (v3:+! v2 v2 z)
    (v3:-! v3 v3 y)
    (v3:+! v3 v3 z)
    (v3:+! v4 v4 y)
    (v3:-! v4 v4 z)
    (v3:-! v5 v5 y)
    (v3:-! v5 v5 z)
    (v3:-! v6 v6 y)
    (v3:-! v6 v6 z)
    (v3:+! v7 v7 y)
    (v3:-! v7 v7 z)
    (v3:-! v8 v8 y)
    (v3:+! v8 v8 z)
    (vector v1 v2 v3 v4 v5 v6 v7 v8)))

(u:fn-> interval (obb v3:vec) v2:vec)
(declaim (notinline interval))
(defun interval (obb axis)
  (declare (optimize speed))
  (let* ((vertices (vertices obb))
         (v (v2:uniform (v3:dot axis (aref vertices 0)))))
    (declare (dynamic-extent vertices v))
    (v2:with-components ((r v))
      (dotimes (i 8)
        (let ((projection (v3:dot axis (aref vertices i))))
          (setf rx (u:clamp rx rx projection)
                ry (u:clamp ry projection ry))))
      r)))

(u:fn-> bounding-aabb! (aabb:aabb obb) aabb:aabb)
(defun bounding-aabb! (aabb obb)
  (declare (optimize speed))
  (v3:with-components ((v (size obb)))
    (let* ((origin (origin obb))
           (rotation (rotation obb))
           (p1 (v3:copy v))
           (p2 (v3:vec (- vx) vy vz))
           (p3 (v3:vec vx (- vy) vz))
           (p4 (v3:vec vx vy (- vz)))
           (p5 (v3:vec (- vx) (- vy) vz))
           (p6 (v3:vec vx (- vy) (- vz)))
           (p7 (v3:vec (- vx) vy (- vz)))
           (p8 (v3:vec (- vx) (- vy) (- vz))))
      (declare (dynamic-extent p1 p2 p3 p4 p5 p6 p7 p8))
      (m3:*v3! p1 rotation p1)
      (m3:*v3! p2 rotation p2)
      (m3:*v3! p3 rotation p3)
      (m3:*v3! p4 rotation p4)
      (m3:*v3! p5 rotation p5)
      (m3:*v3! p6 rotation p6)
      (m3:*v3! p7 rotation p7)
      (m3:*v3! p8 rotation p8)
      (v3:+! p1 origin p1)
      (v3:+! p2 origin p2)
      (v3:+! p3 origin p3)
      (v3:+! p4 origin p4)
      (v3:+! p5 origin p5)
      (v3:+! p6 origin p6)
      (v3:+! p7 origin p7)
      (v3:+! p8 origin p8)
      (v3:with-components ((p1 p1) (p2 p2) (p3 p3) (p4 p4) (p5 p5) (p6 p6) (p7 p7) (p8 p8))
        (let ((min (v3:vec (min p1x p2x p3x p4x p5x p6x p7x p8x)
                           (min p1y p2y p3y p4y p5y p6y p7y p8y)
                           (min p1z p2z p3z p4z p5z p6z p7z p8z)))
              (max (v3:vec (max p1x p2x p3x p4x p5x p6x p7x p8x)
                           (max p1y p2y p3y p4y p5y p6y p7y p8y)
                           (max p1z p2z p3z p4z p5z p6z p7z p8z))))
          (declare (dynamic-extent min max))
          (aabb:from-min/max! aabb min max)
          nil)))
    aabb))

(u:fn-> bounding-aabb (obb) aabb:aabb)
(defun bounding-aabb (obb)
  (declare (optimize speed))
  (bounding-aabb! (aabb:aabb) obb))
