(in-package #:zed.math.geometry.aabb)

(declaim (inline aabb))
(defstruct (aabb
            (:constructor aabb)
            (:conc-name nil)
            (:predicate nil)
            (:copier nil))
  (origin (p3:point) :type p3:point)
  (size (v3:uniform 1.0) :type v3:vec))

(u:fn-> from-min/max (&key (:min p3:point) (:max p3:point)) aabb)
(declaim (inline from-min/max))
(defun from-min/max (&key (min (p3:point -0.5 -0.5 -0.5)) (max (p3:point 0.5 0.5 0.5)))
  (declare (optimize speed))
  (let ((origin (v3:scale (v3:+ min max) 0.5))
        (size (v3:scale (v3:- max min) 0.5)))
    (aabb :origin origin :size size)))

(u:fn-> min (aabb) p3:point)
(declaim (inline min))
(defun min (aabb)
  (declare (optimize speed))
  (let ((origin (origin aabb))
        (size (size aabb)))
    (v3:min (v3:+ origin size)
            (v3:- origin size))))

(u:fn-> max (aabb) p3:point)
(declaim (inline max))
(defun max (aabb)
  (declare (optimize speed))
  (let ((origin (origin aabb))
        (size (size aabb)))
    (v3:max (v3:+ origin size)
            (v3:- origin size))))

(u:fn-> vertices (aabb) (simple-vector 8))
(declaim (inline vertices))
(defun vertices (aabb)
  (declare (optimize speed))
  (v3:with-components ((min- (min aabb))
                       (max- (max aabb)))
    (vector (v3:vec min-x min-y min-z)
            (v3:vec max-x max-y max-z)
            (v3:vec min-x max-y max-z)
            (v3:vec min-x max-y min-z)
            (v3:vec min-x min-y max-z)
            (v3:vec max-x max-y min-z)
            (v3:vec max-x min-y max-z)
            (v3:vec max-x min-y min-z))))

(u:fn-> interval (aabb v3:vec) v2:vec)
(defun interval (aabb axis)
  (declare (optimize speed))
  (let* ((vertices (vertices aabb))
         (v (v2:vec (v3:dot axis (aref vertices 0)))))
    (declare (dynamic-extent vertices v))
    (v2:with-components ((r v))
      (dotimes (i 8)
        (let ((projection (v3:dot axis (aref vertices i))))
          (setf rx (u:clamp rx rx projection)
                ry (u:clamp ry projection ry))))
      r)))
