(in-package #:zed)

(defstruct (collision-state
            (:predicate nil)
            (:copier nil))
  (contact-count 0 :type fixnum)
  (hit-p nil :type boolean))

(u:fn-> collision-state-enter (collision-state collision-state) null)
(defun collision-enter (state1 state2)
  (declare (optimize speed))
  (incf (collision-state-contact-count state1))
  (when (plusp (collision-state-contact-count state1))
    (setf (collision-state-hit-p state1) t))
  (when (plusp (collision-state-contact-count state2))
    (setf (collision-state-hit-p state2) t))
  nil)

(u:fn-> collision-state-exit (collision-state collision-state) null)
(defun exit (state1 state2)
  (declare (optimize speed))
  (decf (collision-state-contact-count state1))
  (when (zerop (collision-state-contact-count state1))
    (setf (collision-state-hit-p state1) nil))
  (when (zerop (collision-state-contact-count state2))
    (setf (collision-state-hit-p state2) nil))
  nil)
