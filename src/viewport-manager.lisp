(in-package #:zed)

(defstruct (viewport-manager
            (:constructor %make-viewport-manager)
            (:predicate nil)
            (:copier nil))
  (window nil :type window)
  (table (u:dict #'eq) :type hash-table)
  (default nil :type (or viewport null)))

(u:define-printer (viewport-manager stream :type nil)
  (format stream "VIEWPORT-MANAGER"))

(u:fn-> make-viewport-manager (window) viewport-manager)
(defun make-viewport-manager (window)
  (declare (optimize speed))
  (let* ((default (make-viewport :default window))
         (manager (%make-viewport-manager :window window :default default)))
    (setf (u:href (viewport-manager-table manager) :default) default)
    manager))

(u:fn-> register-viewport (viewport-manager symbol) null)
(defun register-viewport (manager name)
  (declare (optimize speed))
  (setf (u:href (viewport-manager-table manager) name)
        (make-viewport name (viewport-manager-window manager)))
  nil)

(u:fn-> find-viewport (viewport-manager symbol) (or viewport null))
(defun find-viewport (manager name)
  (declare (optimize speed))
  (u:href (viewport-manager-table manager) name))

(u:fn-> ensure-viewport (viewport-manager symbol) viewport)
(defun ensure-viewport (manager name)
  (declare (optimize speed))
  (unless (find-viewport manager name)
    (register-viewport manager name))
  (values (find-viewport manager name)))

(u:fn-> find-viewport-by-coordinates (viewport-manager u:ub16 u:ub16) viewport)
(defun find-viewport-by-coordinates (manager x y)
  (declare (optimize speed))
  (u:do-hash-values (v (viewport-manager-table manager))
    (let ((vx (viewport-x v))
          (vy (viewport-y v))
          (vw (viewport-width v))
          (vh (viewport-height v)))
      (when (and (<= vx x (+ vx vw))
                 (<= vy y (+ vy vh)))
        (return-from find-viewport-by-coordinates v))))
  (viewport-manager-default manager))

(u:fn-> update-viewports (viewport-manager) null)
(defun update-viewports (manager)
  (declare (optimize speed))
  (u:do-hash-values (v (viewport-manager-table manager))
    (update-viewport v))
  nil)

(defmethod recompile ((type (eql :viewport)) data)
  (u:when-let ((viewport (find-viewport (core-viewports =core=) data)))
    (update-viewport viewport)
    (v:debug :zed "Recompiled viewport: ~s" data)))
