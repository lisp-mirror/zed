(in-package #:zed.shader-library)

(defun collider-new/vertex ()
  (values))

(defun collider-sphere/geometry (&uniforms
                                 (model :mat4)
                                 (view :mat4)
                                 (proj :mat4)
                                 (center :vec3)
                                 (radius :float))
  (declare (output-primitive :kind :line-strip :max-vertices 256))
  (let ((mvp (* proj view model))
        (iterations 256))
    (dotimes (i iterations)
      (let* ((coeff (/ i (1- (float iterations))))
             (theta (float (mix 0 (* pi 24) coeff)))
             (phi (float (mix 0 pi coeff)))
             (x (* radius (cos theta) (sin phi)))
             (y (* radius (sin theta) (sin phi)))
             (z (* radius (cos phi)))
             (local-point (vec4 (+ center (vec3 x y z)) 1f0))
             (world-point (* mvp local-point)))
        (emit ()
          world-point)))
    (end-primitive))
  (values))

(defun collider-box/geometry (&uniforms
                              (model :mat4)
                              (view :mat4)
                              (proj :mat4)
                              (center :vec3)
                              (min :vec3)
                              (max :vec3))
  (declare (output-primitive :kind :line-strip :max-vertices 16))
  (let* ((mvp (* proj view model))
         (a (* mvp (vec4 (+ center (vec3 (.x min) (.y max) (.z max))) 1.0)))
         (b (* mvp (vec4 (+ center (vec3 (.x max) (.y max) (.z max))) 1.0)))
         (c (* mvp (vec4 (+ center (vec3 (.x max) (.y min) (.z max))) 1.0)))
         (d (* mvp (vec4 (+ center (vec3 (.x min) (.y min) (.z max))) 1.0)))
         (e (* mvp (vec4 (+ center (vec3 (.x min) (.y max) (.z min))) 1.0)))
         (f (* mvp (vec4 (+ center (vec3 (.x max) (.y max) (.z min))) 1.0)))
         (g (* mvp (vec4 (+ center (vec3 (.x max) (.y min) (.z min))) 1.0)))
         (h (* mvp (vec4 (+ center (vec3 (.x min) (.y min) (.z min))) 1.0))))
    (emit () a)
    (emit () b)
    (emit () c)
    (emit () d)
    (emit () a)
    (emit () e)
    (emit () f)
    (emit () g)
    (emit () h)
    (emit () e)
    (emit () f)
    (emit () b)
    (emit () c)
    (emit () g)
    (emit () h)
    (emit () d)
    (end-primitive))
  (values))

(defun collider-new/fragment (&uniforms
                              (hit-color :vec4)
                              (miss-color :vec4)
                              (contact-p :bool))
  (if contact-p
      hit-color
      miss-color))

(define-shader collider-sphere (:primitive :points)
  (:vertex (collider-new/vertex))
  (:geometry (collider-sphere/geometry))
  (:fragment (collider-new/fragment)))

(define-shader collider-box (:primitive :points)
  (:vertex (collider-new/vertex))
  (:geometry (collider-box/geometry))
  (:fragment (collider-new/fragment)))
