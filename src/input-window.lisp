(in-package #:zed)

(u:define-constant +window-event-names+
    #(nil :show :hide nil :move :resize nil :minimize :maximize :restore :mouse-focus-enter
      :mouse-focus-exit :keyboard-focus-enter :keyboard-focus-exit :close nil nil)
  :test #'equalp)

(u:fn-> input-event/window-show (input-manager) null)
(declaim (inline input-event/window-show))
(defun input-event/window-show (manager)
  (declare (optimize speed))
  (input-transition-in manager :window :visible)
  nil)

(u:fn-> input-event/window-hide (input-manager) null)
(declaim (inline input-event/window-hide))
(defun input-event/window-hide (manager)
  (declare (optimize speed))
  (input-transition-out manager :window :visible)
  nil)

;; TODO: Currently we only set the window's position, but if it is moved to a different monitor, we
;; also want to update the window's monitor reference, since it could have a different resolution,
;; refresh rate, etc.
(u:fn-> input-event/window-move (input-manager window u:b32 u:b32) null)
(declaim (inline input-event/window-move))
(defun input-event/window-move (manager window x y)
  (declare (optimize speed)
           (ignore manager))
  (move-window window x y)
  nil)

(u:fn-> input-event/window-resize (input-manager window viewport-manager u:b32 u:b32) null)
(declaim (inline input-event/window-resize))
(defun input-event/window-resize (manager window viewports width height)
  (declare (optimize speed)
           (ignore manager))
  (resize-window window width height)
  (update-viewports viewports)
  nil)

(u:fn-> input-event/window-minimize (input-manager) null)
(defun input-event/window-minimize (manager)
  (declare (optimize speed))
  (let ((states (input-manager-states manager)))
    (cond
      ((u:when-let ((maximize (u:href states '(:window :maximize))))
         (input-transition-enabled maximize))
       (input-transition-out manager :window :maximize))
      ((u:when-let ((restore (u:href states '(:window :restore))))
         (input-transition-enabled restore))
       (input-transition-out manager :window :restore)))
    (input-transition-in manager :window :minimize)
    nil))

(u:fn-> input-event/window-maximize (input-manager) null)
(defun input-event/window-maximize (manager)
  (declare (optimize speed))
  (let ((states (input-manager-states manager)))
    (cond
      ((u:when-let ((minimize (u:href states '(:window :minimize))))
         (input-transition-enabled minimize))
       (input-transition-out manager :window :minimize))
      ((u:when-let ((restore (u:href states '(:window :restore))))
         (input-transition-enabled restore))
       (input-transition-out manager :window :restore)))
    (input-transition-in manager :window :maximize)
    nil))

(u:fn-> input-event/window-restore (input-manager) null)
(defun input-event/window-restore (manager)
  (declare (optimize speed))
  (let ((states (input-manager-states manager)))
    (cond
      ((u:when-let ((minimize (u:href states '(:window :minimize))))
         (input-transition-enabled minimize))
       (input-transition-out manager :window :minimize))
      ((u:when-let ((maximize (u:href states '(:window :maximize))))
         (input-transition-enabled maximize))
       (input-transition-out manager :window :maximize)))
    (input-transition-in manager :window :restore)
    nil))

(u:fn-> input-event/window-mouse-focus-enter (input-manager) null)
(declaim (inline input-event/window-mouse-focus-enter))
(defun input-event/window-mouse-focus-enter (manager)
  (declare (optimize speed))
  (input-transition-in manager :window :mouse-focus)
  nil)

(u:fn-> input-event/window-mouse-focus-exit (input-manager) null)
(declaim (inline input-event/window-mouse-focus-exit))
(defun input-event/window-mouse-focus-exit (manager)
  (declare (optimize speed))
  (input-transition-out manager :window :mouse-focus)
  nil)

(u:fn-> input-event/window-keyboard-focus-enter (input-manager) null)
(declaim (inline input-event/window-keyboard-focus-enter))
(defun input-event/window-keyboard-focus-enter (manager)
  (declare (optimize speed))
  (input-transition-in manager :window :keyboard-focus)
  nil)

(u:fn-> input-event/window-keyboard-focus-exit (input-manager) null)
(declaim (inline input-event/window-keyboard-focus-exit))
(defun input-event/window-keyboard-focus-exit (manager)
  (declare (optimize speed))
  (input-transition-out manager :window :keyboard-focus)
  nil)

(u:fn-> input-event/window-close (input-manager) null)
(declaim (inline input-event/window-close))
(defun input-event/window-close (manager)
  (declare (optimize speed))
  (input-transition-in manager :window :close)
  nil)

(defun on-window-event-enter (core event)
  (declare (optimize speed))
  (u:when-let ((state (u:href (input-manager-states (core-input-manager core))
                              (list :window event))))
    (input-transition-enter state)))

(defun on-window-event-enabled (core event)
  (declare (optimize speed))
  (u:when-let ((state (u:href (input-manager-states (core-input-manager core))
                              (list :window event))))
    (input-transition-enabled state)))

(defun on-window-event-exit (core event)
  (declare (optimize speed))
  (u:when-let ((state (u:href (input-manager-states (core-input-manager core))
                              (list :window event))))
    (input-transition-exit state)))
