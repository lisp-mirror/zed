(in-package #:zed)

(defstruct (viewport
            (:constructor %make-viewport)
            (:predicate nil)
            (:copier nil))
  (data nil :type viewport-data)
  (camera nil :type (or trait null))
  (window nil :type window)
  (x 0 :type u:ub16)
  (y 0 :type u:ub16)
  (width 0 :type u:ub16)
  (height 0 :type u:ub16))

(u:define-printer (viewport stream :type nil)
  (format stream "VIEWPORT: ~s" (viewport-data-name (viewport-data viewport))))

(u:fn-> update-viewport (viewport) null)
(defun update-viewport (viewport)
  (declare (optimize speed))
  (let* ((data (viewport-data viewport))
         (window (viewport-window viewport))
         (window-width (window-width window))
         (window-height (window-height window)))
    (setf (viewport-x viewport) (truncate (u:lerp (viewport-data-x data) 0 window-width))
          (viewport-y viewport) (truncate (u:lerp (viewport-data-y data) 0 window-height))
          (viewport-width viewport) (truncate (u:lerp (viewport-data-width data) 0 window-width))
          (viewport-height viewport) (truncate
                                      (u:lerp (viewport-data-height data) 0 window-height)))
    nil))

(u:fn-> configure-viewport (viewport) null)
(declaim (inline configure-viewport))
(defun configure-viewport (viewport)
  (declare (optimize speed))
  (gl:viewport (viewport-x viewport)
               (viewport-y viewport)
               (viewport-width viewport)
               (viewport-height viewport))
  nil)

(u:fn-> make-viewport (symbol window) viewport)
(defun make-viewport (name window)
  (declare (optimize speed))
  (let ((viewport (%make-viewport :data (find-viewport-data name) :window window)))
    (update-viewport viewport)
    viewport))
