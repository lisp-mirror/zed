(in-package #:zed.shader-library)

(defun blum-blum-shub/coord-prepare ((x :vec4))
  (- x (* (floor (* x (/ 61.0))) 61.0)))

(defun blum-blum-shub/permute-and-resolve ((x :vec4))
  (fract (* x x (/ 61.0))))

(defun blum-blum-shub/permute ((x :vec4))
  (* (blum-blum-shub/permute-and-resolve x) 61.0))

(defun blum-blum-shub ((grid-cell :vec2))
  (let* ((hash-coord (blum-blum-shub/coord-prepare
                      (vec4 grid-cell (1+ grid-cell))))
         (hash (blum-blum-shub/permute (* (.xzxz hash-coord) 7.0))))
    (blum-blum-shub/permute-and-resolve (+ hash (.yyww hash-coord)))))

(defun blum-blum-shub/hq ((grid-cell :vec2))
  (let* ((hash-coord (blum-blum-shub/coord-prepare
                      (vec4 grid-cell (1+ grid-cell))))
         (hash (blum-blum-shub/permute (* (.xzxz hash-coord) 7.0))))
    (blum-blum-shub/permute-and-resolve
     (+ (blum-blum-shub/permute (+ hash (.yyww hash-coord)))
        (.xzxz hash-coord)))))

(defun blum-blum-shub ((grid-cell :vec3))
  (decf (.xyz grid-cell) (* (floor (* (.xyz grid-cell) (/ 60.0))) 60.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 58.5)) (1+ grid-cell)))
         (p (blum-blum-shub/permute
             (+ (blum-blum-shub/permute
                 (.xyxy (vec2 (.x grid-cell) (.x grid-cell-inc1))))
                (.xxyy (vec2 (.y grid-cell) (.y grid-cell-inc1))))))
         (low-z (blum-blum-shub/permute-and-resolve (+ p (.z grid-cell))))
         (high-z (blum-blum-shub/permute-and-resolve
                  (+ p (.z grid-cell-inc1)))))
    (values low-z high-z)))

(defun fast32 ((grid-cell :vec2))
  (let ((p (vec4 grid-cell (1+ grid-cell))))
    (decf p (* (floor (* p (/ 71.0))) 71.0))
    (incf p (vec4 26 161 26 161))
    (multf p p)
    (fract (* (.xzxz p) (.yyww p) (/ 951.135664)))))

(defun fast32/2-per-corner ((grid-cell :vec2))
  (let ((p (vec4 grid-cell (1+ grid-cell))))
    (decf p (* (floor (* p (/ 71.0))) 71.0))
    (incf p (vec4 26 161 26 161))
    (multf p p)
    (setf p (* (.xzxz p) (.yyww p)))
    (values (fract (* p (/ 951.135664)))
            (fract (* p (/ 642.949883))))))

(defun fast32/3-per-corner ((grid-cell :vec2))
  (let ((p (vec4 grid-cell (1+ grid-cell))))
    (decf p (* (floor (* p (/ 71.0))) 71.0))
    (incf p (vec4 26 161 26 161))
    (multf p p)
    (setf p (* (.xzxz p) (.yyww p)))
    (values (fract (* p (/ 951.135664)))
            (fract (* p (/ 642.949883)))
            (fract (* p (/ 803.202459))))))

(defun fast32/cell ((grid-cell :vec2))
  (let ((p (- grid-cell (* (floor (* grid-cell (/ 71.0))) 71.0))))
    (incf p (vec2 26 161))
    (multf p p)
    (fract (* (.x p) (.y p) (/ (vec4 951.1357 642.9499 803.202 986.97327))))))

(defun fast32 ((grid-cell :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (p (+ (vec4 (.xy grid-cell) (.xy grid-cell-inc1))
               (vec4 50 161 50 161)))
         (high-z (/ (+ 635.2987 (* (vec2 (.z grid-cell) (.z grid-cell-inc1))
                                   48.600388)))))
    (multf p p)
    (setf p (* (.xzxz p) (.yyww p)))
    (values (fract (* p (.x high-z)))
            (fract (* p (.y high-z))))))

(defun fast32 ((grid-cell :vec3)
               (v1-mask :vec3)
               (v2-mask :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (p (+ (vec4 (.xy grid-cell) (.xy grid-cell-inc1))
               (vec4 50 161 50 161)))
         ((v1z-v2z :vec2))
         ((mod-vals :vec4))
         (p (* p p))
         (v1xy-v2xy (mix (.xyxy p)
                         (.zwzw p)
                         (vec4 (.xy v1-mask) (.xy v2-mask))))
         (p (* (vec4 (.x p) (.xz v1xy-v2xy) (.z p))
               (vec4 (.y p) (.yw v1xy-v2xy) (.w p))))
         (v1z-v2z (vec2 (if (< (.z v1-mask) 0.5)
                            (.z grid-cell)
                            (.z grid-cell-inc1))
                        (if (< (.z v2-mask) 0.5)
                            (.z grid-cell)
                            (.z grid-cell-inc1))))
         (mod-vals (/ (+ 635.2987
                         (* (vec4 (.z grid-cell) v1z-v2z (.z grid-cell-inc1))
                            48.500388)))))
    (fract (* p mod-vals))))

(defun fast32/3-per-corner ((grid-cell :vec3)
                            (v1-mask :vec3)
                            (v2-mask :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (p (+ (vec4 (.xy grid-cell) (.xy grid-cell-inc1))
               (vec4 50 161 50 161)))
         (floats (vec3 635.2987 682.3575 668.9265))
         (z-inc (vec3 48.500388 65.29412 63.9346))
         (p (* p p))
         (v1xy-v2xy (mix (.xyxy p)
                         (.zwzw p)
                         (vec4 (.xy v1-mask) (.xy v2-mask))))
         (p (* (vec4 (.x p) (.xz v1xy-v2xy) (.z p))
               (vec4 (.y p) (.yw v1xy-v2xy) (.w p))))
         (low-z-mods (/ (+ floats (* z-inc (.z grid-cell)))))
         (high-z-mods (/ (+ floats (* z-inc (.z grid-cell-inc1)))))
         (v1-mask (if (< (.z v1-mask) 0.5) low-z-mods high-z-mods))
         (v2-mask (if (< (.z v2-mask) 0.5) low-z-mods high-z-mods)))
    (values (fract (* p (vec4 (.x low-z-mods)
                              (.x v1-mask)
                              (.x v2-mask)
                              (.x high-z-mods))))
            (fract (* p (vec4 (.y low-z-mods)
                              (.y v1-mask)
                              (.y v2-mask)
                              (.y high-z-mods))))
            (fract (* p (vec4 (.z low-z-mods)
                              (.z v1-mask)
                              (.z v2-mask)
                              (.z high-z-mods)))))))

(defun fast32/3-per-corner ((grid-cell :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (p (+ (vec4 (.xy grid-cell) (.xy grid-cell-inc1))
               (vec4 50 161 50 161)))
         (floats (vec3 635.2987 682.3575 668.9265))
         (z-inc (vec3 48.500388 65.29412 63.9346))
         (low-z-mod (/ (+ floats (* (.z grid-cell) z-inc))))
         (high-z-mod (/ (+ floats (* (.z grid-cell-inc1) z-inc))))
         (p (* p p))
         (p (* (.xzxz p) (.yyww p))))
    (values (fract (* p (.x low-z-mod)))
            (fract (* p (.y low-z-mod)))
            (fract (* p (.z low-z-mod)))
            (fract (* p (.x high-z-mod)))
            (fract (* p (.y high-z-mod)))
            (fract (* p (.z high-z-mod))))))

(defun fast32/4-per-corner ((grid-cell :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (p (+ (vec4 (.xy grid-cell) (.xy grid-cell-inc1))
               (vec4 50 161 50 161)))
         (floats (vec4 635.2987 682.3575 668.9265 588.2551))
         (z-inc (vec4 48.500388 65.29412 63.9346 63.279682))
         (low-z-3 (/ (+ floats (* (.z grid-cell) z-inc))))
         (high-z-3 (/ (+ floats (* (.z grid-cell-inc1) z-inc))))
         (p (* p p))
         (p (* (.xzxz p) (.yyww p))))
    (values (fract (* p (.x low-z-3)))
            (fract (* p (.y low-z-3)))
            (fract (* p (.z low-z-3)))
            (fract (* p (.w low-z-3)))
            (fract (* p (.x high-z-3)))
            (fract (* p (.y high-z-3)))
            (fract (* p (.z high-z-3)))
            (fract (* p (.w high-z-3))))))

(defun fast32/cell ((grid-cell :vec3))
  (let ((floats (vec4 635.2987 682.3575 668.9265 588.2551))
        (z-inc (vec4 48.500388 65.29412 63.9346 63.279682)))
    (decf grid-cell (* (floor (* grid-cell (/ 71.0))) 71.0))
    (incf (.xy grid-cell) (vec2 50 161))
    (multf (.xy grid-cell) (.xy grid-cell))
    (fract (* (.x grid-cell)
              (.y grid-cell)
              (/ (+ floats (* z-inc (.z grid-cell))))))))

(defun fast32-2 ((grid-cell :vec2))
  (let ((p (vec4 grid-cell (1+ grid-cell))))
    (setf p (+ (* (- p (* (floor (* p (/ 69.0))) 69.0))
                  (.xyxy (vec2 2.009842 1.372549)))
               (.xyxy (vec2 403.83917 377.2427))))
    (multf p p)
    (fract (* (.xzxz p) (.yyww p) (/ 32745.708984)))))

(defun fast32-2 ((grid-cell :vec3))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((offset (vec3 55.882355 63.167774 52.941177))
         (scale (vec3 0.235142 0.205890 0.216449))
         (grid-cell-inc1 (* (step grid-cell (vec3 67.5)) (1+ grid-cell)))
         (grid-cell (+ (* grid-cell scale) offset))
         (grid-cell (* grid-cell grid-cell))
         (grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
         (grid-cell-inc1 (* grid-cell-inc1 grid-cell-inc1))
         (x (* (vec4 (.x grid-cell)
                     (.x grid-cell-inc1)
                     (.x grid-cell)
                     (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1)))))
    (values (fract (* x (.z grid-cell) (/ 69412.07)))
            (fract (* x (.z grid-cell-inc1) (/ 69412.07))))))

(defun fast32-2 ((grid-cell :vec4))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((offset (vec4 16.84123 18.774548 16.873274 13.664607))
         (scale (vec4 0.102007 0.114473 0.139651 0.08455))
         (grid-cell-inc1 (* (step grid-cell (vec4 67.5)) (1+ grid-cell)))
         (grid-cell (+ (* grid-cell scale) offset))
         (grid-cell (* grid-cell grid-cell))
         (grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
         (grid-cell-inc1 (* grid-cell-inc1 grid-cell-inc1))
         (x (* (vec4 (.x grid-cell)
                     (.x grid-cell-inc1)
                     (.x grid-cell)
                     (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1))))
         (z (* (vec4 (.z grid-cell)
                     (.z grid-cell-inc1)
                     (.z grid-cell)
                     (.z grid-cell-inc1))
               (vec4 (.ww grid-cell) (.ww grid-cell-inc1))
               (/ 47165.637))))
    (values (fract (* x (.x z)))
            (fract (* x (.y z)))
            (fract (* x (.z z)))
            (fract (* x (.w z))))))

(defun fast32-2/4-per-corner ((grid-cell :vec4))
  (decf grid-cell (* (floor (* grid-cell (/ 69.0))) 69.0))
  (let* ((offset (vec4 16.84123 18.774548 16.873274 13.664607))
         (scale (vec4 0.102007 0.114473 0.139651 0.08455))
         (grid-cell-inc1 (* (step grid-cell (vec4 67.5)) (1+ grid-cell)))
         (grid-cell (+ (* grid-cell scale) offset))
         (grid-cell (* grid-cell grid-cell))
         (grid-cell-inc1 (+ (* grid-cell-inc1 scale) offset))
         (grid-cell-inc1 (* grid-cell-inc1 grid-cell-inc1))
         (x (* (vec4 (.x grid-cell)
                     (.x grid-cell-inc1)
                     (.x grid-cell)
                     (.x grid-cell-inc1))
               (vec4 (.yy grid-cell) (.yy grid-cell-inc1))))
         (z (* (vec4 (.z grid-cell)
                     (.z grid-cell-inc1)
                     (.z grid-cell)
                     (.z grid-cell-inc1))
               (vec4 (.ww grid-cell) (.ww grid-cell-inc1))))
         (hash (* x (.x z)))
         (z0w0-0 (fract (* hash (/ 56974.746))))
         (z0w0-1 (fract (* hash (/ 47165.637))))
         (z0w0-2 (fract (* hash (/ 55049.668))))
         (z0w0-3 (fract (* hash (/ 49901.273))))
         (hash (* x (.y z)))
         (z1w0-0 (fract (* hash (/ 56974.746))))
         (z1w0-1 (fract (* hash (/ 47165.637))))
         (z1w0-2 (fract (* hash (/ 55049.668))))
         (z1w0-3 (fract (* hash (/ 49901.273))))
         (hash (* x (.z z)))
         (z0w1-0 (fract (* hash (/ 56974.746))))
         (z0w1-1 (fract (* hash (/ 47165.637))))
         (z0w1-2 (fract (* hash (/ 55049.668))))
         (z0w1-3 (fract (* hash (/ 49901.273))))
         (hash (* x (.w z)))
         (z1w1-0 (fract (* hash (/ 56974.746))))
         (z1w1-1 (fract (* hash (/ 47165.637))))
         (z1w1-2 (fract (* hash (/ 55049.668))))
         (z1w1-3 (fract (* hash (/ 49901.273)))))
    (values z0w0-0 z0w0-1 z0w0-2 z0w0-3
            z1w0-0 z1w0-1 z1w0-2 z1w0-3
            z0w1-0 z0w1-1 z0w1-2 z0w1-3
            z1w1-0 z1w1-1 z1w1-2 z1w1-3)))
