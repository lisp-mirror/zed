(in-package #:zed)

(u:fn-> make-picking-ray (core) ray:ray)
(defun make-picking-ray (core)
  (declare (optimize speed))
  (u:mvlet ((x y (get-mouse-position core)))
    (let* ((viewport-manager (core-viewports core))
           (viewport (find-viewport-by-coordinates viewport-manager x y))
           (camera (viewport-camera viewport))
           (view (tr.cam::view camera))
           (projection (tr.cam::projection camera))
           (viewport (v4:vec (viewport-x viewport)
                             (viewport-y viewport)
                             (viewport-width viewport)
                             (viewport-height viewport)))
           (start (p3:unproject (p3:point x y 0) view projection viewport))
           (end (p3:unproject (p3:point x y 1) view projection viewport)))
      (declare (dynamic-extent viewport start end))
      (ray:from-points :from start :to end))))

(u:fn-> pick-game-object (core) (or game-object null))
(defun pick-game-object (core)
  (u:mvlet* ((ray (make-picking-ray core))
             (active-traits (trait-manager-active-by-type (core-trait-manager core)))
             (picked nil))
    (u:when-let ((active (u:href active-traits 'tr.col:collider)))
      (u:do-hash-keys (k active)
        (u:when-let* ((volume (tr.col::volume k))
                      (n (raycast ray (volume-geometry volume))))
          (when (tr.col::picked-hook k)
            (push (cons n k) picked)))))
    (when picked
      (let* ((collider (cdar (stable-sort picked #'< :key #'car)))
             (game-object (trait-owner collider)))
        (funcall (tr.col::picked-hook collider) game-object)
        game-object))))
