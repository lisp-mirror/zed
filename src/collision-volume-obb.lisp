(in-package #:cl-user)

(defpackage #:%zed.collision.volume.obb
  ;; Third-party aliases
  (:local-nicknames
   (#:u #:golden-utils))
  ;; Internal aliases
  (:local-nicknames
   (#:gob #:%zed.game-object)
   (#:m3 #:zed.math.matrix3)
   (#:m4 #:zed.math.matrix4)
   (#:q #:zed.math.quaternion)
   (#:tfm #:%zed.transform)
   (#:tr #:%zed.trait)
   (#:tr.mesh #:zed.trait.mesh)
   (#:v3 #:zed.math.vector3)
   (#:v4 #:zed.math.vector4)
   (#:vol.struct #:%zed.collision.volume.struct))
  (:use #:cl)
  (:shadow
   #:type))

(in-package #:%zed.collision.volume.obb)

(declaim (inline %make-obb))
(defstruct (obb
            (:include vol.struct::volume
             (type :obb)
             (mesh-name "box"))
            (:constructor %make-obb)
            (:conc-name "")
            (:predicate nil)
            (:copier nil))
  (world-center (v3:zero) :type v3:vec)
  (axes (m3:zero) :type m3:mat)
  (half-extents (v3:zero) :type v3:vec)
  (min-extent (v3:uniform -0.5) :type v3:vec)
  (max-extent (v3:uniform 0.5) :type v3:vec)
  (closest-point-distance (v3:zero) :type v3:vec)
  (closest-point (v3:zero) :type v3:vec)
  (axis-column (v3:zero) :type v3:vec)
  (rotation (m3:id) :type m3:mat)
  (normalized-rotation (m3:id) :type m3:mat)
  (translation (v3:zero) :type v3:vec)
  (diagonal (v3:zero) :type v3:vec)
  (extent-center (v3:zero) :type v3:vec))

(u:fn-> get-closest-point/obb-point (obb v3:vec) v3:vec)
(defun get-closest-point/obb-point (obb point)
  (declare (optimize speed))
  (let* ((world-center (world-center obb))
         (axes (axes obb))
         (d (v3:-! (closest-point-distance obb) point world-center))
         (q (v3:copy! (closest-point obb) world-center)))
    (dotimes (i 3)
      (let* ((e (aref (half-extents obb) i))
             (axis (m3:get-column! (axis-column obb) axes i))
             (dist (u:clamp (v3:dot d axis) (- e) e)))
        (v3:scale! axis axis dist)
        (v3:+! q q axis)))
    q))

(u:fn-> make-obb-obb-rotation (obb obb) (values m3:mat m3:mat))
(defun make-obb-obb-rotation (obb1 obb2)
  (declare (optimize speed))
  (let ((axes1 (axes obb1))
        (axis1 (axis-column obb1))
        (axes2 (axes obb2))
        (axis2 (axis-column obb2)))
    (m3:with-components ((a (rotation obb1))
                         (b (rotation obb2)))
      (psetf a00 (v3:dot (m3:get-column! axis1 axes1 0) (m3:get-column! axis2 axes2 0))
             a10 (v3:dot (m3:get-column! axis1 axes1 1) (m3:get-column! axis2 axes2 0))
             a20 (v3:dot (m3:get-column! axis1 axes1 2) (m3:get-column! axis2 axes2 0))
             a01 (v3:dot (m3:get-column! axis1 axes1 0) (m3:get-column! axis2 axes2 1))
             a11 (v3:dot (m3:get-column! axis1 axes1 1) (m3:get-column! axis2 axes2 1))
             a21 (v3:dot (m3:get-column! axis1 axes1 2) (m3:get-column! axis2 axes2 1))
             a02 (v3:dot (m3:get-column! axis1 axes1 0) (m3:get-column! axis2 axes2 2))
             a12 (v3:dot (m3:get-column! axis1 axes1 1) (m3:get-column! axis2 axes2 2))
             a22 (v3:dot (m3:get-column! axis1 axes1 2) (m3:get-column! axis2 axes2 2)))
      (setf b00 (+ (abs a00) 1e-7)
            b10 (+ (abs a10) 1e-7)
            b20 (+ (abs a20) 1e-7)
            b01 (+ (abs a01) 1e-7)
            b11 (+ (abs a11) 1e-7)
            b21 (+ (abs a21) 1e-7)
            b02 (+ (abs a02) 1e-7)
            b12 (+ (abs a12) 1e-7)
            b22 (+ (abs a22) 1e-7))
      (values a b))))

(u:fn-> make-obb-obb-translation (obb obb) v3:vec)
(defun make-obb-obb-translation (obb1 obb2)
  (declare (optimize speed))
  (let* ((axes1 (axes obb1))
         (axis1 (axis-column obb1))
         (world-center1 (world-center obb1))
         (world-center2 (world-center obb2))
         (translation (v3:-! (translation obb1) world-center2 world-center1)))
    (v3:vec (v3:dot translation (m3:get-column! axis1 axes1 0))
            (v3:dot translation (m3:get-column! axis1 axes1 1))
            (v3:dot translation (m3:get-column! axis1 axes1 2)))))

(u:fn-> update (obb tr:trait) null)
(defun update (obb collider)
  (declare (optimize speed))
  (let* ((owner (tr::owner collider))
         (center (center obb))
         (min (tfm::transform-point owner (v3:+ center (min-extent obb))))
         (max (tfm::transform-point owner (v3:+ center (max-extent obb))))
         (center (v3:lerp! (extent-center obb) min max 0.5))
         (axes (m4:rotation-to-mat3
                (m4:normalize-rotation (tfm::get-transform owner :space :world))))
         (axis (axis-column obb))
         (diagonal (v3:-! (diagonal obb) max center)))
    (setf (world-center obb) center
          (axes obb) axes
          (half-extents obb) (v3:vec (v3:dot diagonal (m3:get-column! axis axes 0))
                                     (v3:dot diagonal (m3:get-column! axis axes 1))
                                     (v3:dot diagonal (m3:get-column! axis axes 2)))))
  nil)

(u:fn-> update-visualization (obb gob:game-object) null)
(defun update-visualization (obb visualization)
  (declare (optimize speed))
  (tfm::translate visualization (center obb) :replace-p t)
  (tfm::scale visualization (v3:- (max-extent obb) (min-extent obb)) :replace-p t)
  nil)

(u:fn-> make-obb (tr:trait) obb)
(defun make-obb (collider)
  (declare (optimize speed))
  (let ((obb (%make-obb :collider collider)))
    (u:when-let ((mesh (tr:find-trait (tr::owner collider) 'tr.mesh:mesh)))
      (u:mvlet ((min max (tr.mesh::get-extents mesh)))
        (setf (center obb) (v3:scale (v3:+ min max) 0.5)
              (min-extent obb) min
              (max-extent obb) max)))
    obb))
