(in-package #:zed)

(defstruct (picker
            (:predicate nil)
            (:copier nil))
  (start (v3:zero) :type v3:vec)
  (end (v3:zero) :type v3:vec))

(defgeneric pick-collision-volume (system volume)
  (:method (system volume)))

(defmethod pick-collision-volume (system (volume collision-volume-sphere))
  (declare (optimize speed))
  (let* ((picker (collision-system-picker system))
         (center (collision-volume-world-center volume))
         (dir (line3d:direction picker))
         (m (v3:- (line3d:start picker) center))
         (b (v3:dot m dir))
         (c (- (v3:length-squared m)
               (expt (collision-volume-sphere-radius volume) 2))))
    (declare (dynamic-extent dir m))
    (unless (and (plusp c) (plusp b))
      (let ((discriminant (- (expt b 2) c)))
        (unless (minusp discriminant)
          (let ((x (max 0.0 (- (- b) (sqrt discriminant)))))
            (when (<= x (line3d:length picker))
              x)))))))

(defmethod pick-collision-volume (system (volume collision-volume-box))
  (declare (optimize speed))
  (let* ((picker (collision-system-picker system))
         (axes (collision-volume-box-axes volume))
         (x-axis (m3:get-column axes 0))
         (y-axis (m3:get-column axes 1))
         (z-axis (m3:get-column axes 2))
         (dir (line3d:direction picker))
         (p (v3:- (collision-volume-world-center volume) (line3d:start picker)))
         (f (v3:vec (v3:dot x-axis dir) (v3:dot y-axis dir) (v3:dot z-axis dir)))
         (e (v3:vec (v3:dot x-axis p) (v3:dot y-axis p) (v3:dot z-axis p)))
         (x (make-array 6 :element-type 'u:f32 :initial-element 0.0)))
    (declare (dynamic-extent x-axis y-axis z-axis dir p f e x))
    (dotimes (i 3)
      (let ((ei (aref e i))
            (hi (aref (collision-volume-box-half-extents volume) i)))
        (when (zerop (aref f i))
          (when (or (plusp (- (- ei) hi))
                    (minusp (+ (- ei) hi)))
            (return-from pick-collision-volume nil))
          (setf (aref f i) 1e-7))
        (let ((fi (aref f i)))
          (setf (aref x (* i 2)) (/ (+ ei hi) fi)
                (aref x (1+ (* i 2))) (/ (- ei hi) fi)))))
    (let* ((x0 (aref x 0))
           (x1 (aref x 1))
           (x2 (aref x 2))
           (x3 (aref x 3))
           (x4 (aref x 4))
           (x5 (aref x 5))
           (t-min (max (min x0 x1) (min x2 x3) (min x4 x5)))
           (t-max (min (max x0 x1) (max x2 x3) (max x4 x5))))
      (when (or (minusp t-max)
                (> t-min t-max))
        (return-from pick-collision-volume nil))
      (if (minusp t-min)
          t-max
          t-min))))

(u:fn-> update-collision-picker (context u:b16 u:b16) null)
(defun update-collision-picker (context x y)
  (declare (optimize speed))
  (u:when-let* ((collision-system (context-collision-system context))
                (viewport-manager (context-viewports context))
                (viewport (find-viewport-by-coordinates viewport-manager x y))
                (picker (collision-system-picker collision-system))
                (start (line3d:start picker))
                (end (line3d:end picker))
                (camera (context-active-camera context))
                (view (tr.cam::view camera))
                (projection (tr.cam::projection camera))
                (viewport (v4:vec (float (viewport-x viewport) 1f0)
                                  (float (viewport-y viewport) 1f0)
                                  (float (viewport-width viewport) 1f0)
                                  (float (viewport-height viewport) 1f0)))
                (mx (float x 1f0))
                (my (float y 1f0)))
    (v3:copy! start (p3:unproject (p3:point mx my 0) view projection viewport))
    (v3:copy! end (p3:unproject (p3:point mx my 1) view projection viewport))
    nil))

(u:fn-> pick-game-object (context) (or game-object null))
(defun pick-game-object (context)
  (u:mvlet* ((active-traits (trait-manager-active-by-type (context-trait-manager context)))
             (collision-system (context-collision-system context))
             (mx my (get-mouse-position context))
             (picked nil))
    (u:when-let ((active (u:href active-traits 'tr.col:collider)))
      (update-collision-picker context mx my)
      (u:do-hash-keys (k active)
        (u:when-let* ((volume (tr.col::volume k))
                      (n (pick-collision-volume collision-system volume)))
          (when (tr.col::picked-hook k)
            (push (cons n k) picked)))))
    (when picked
      (let* ((collider (cdar (stable-sort picked #'< :key #'car)))
             (game-object (trait-owner collider)))
        (funcall (tr.col::picked-hook collider) game-object)
        game-object))))
